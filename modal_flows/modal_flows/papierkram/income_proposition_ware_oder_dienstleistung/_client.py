# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.remove_none_from_dict import remove_none_from_dict
from ..not_found_error import NotFoundError
from ..unprocessable_entity_error import UnprocessableEntityError
from .get_income_propositions_request_order_direction_item import GetIncomePropositionsRequestOrderDirectionItem
from .post_income_propositions_request_proposition_type import PostIncomePropositionsRequestPropositionType
from .post_income_propositions_request_time_unit import PostIncomePropositionsRequestTimeUnit
from .put_income_propositions_id_request_proposition_type import PutIncomePropositionsIdRequestPropositionType
from .put_income_propositions_id_request_time_unit import PutIncomePropositionsIdRequestTimeUnit

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IncomePropositionWareOderDienstleistungClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_all_propositions(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[
                GetIncomePropositionsRequestOrderDirectionItem,
                typing.List[GetIncomePropositionsRequestOrderDirectionItem],
            ]
        ] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetIncomePropositionsRequestOrderDirectionItem, typing.List[GetIncomePropositionsRequestOrderDirectionItem]]]. Order direction (must be used with order_by)
        ---
        from feliche-93 import GetIncomePropositionsRequestOrderDirectionItem
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.list_all_propositions(order_direction=GetIncomePropositionsRequestOrderDirectionItem.ASC, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "income/propositions"),
            params=remove_none_from_dict(
                {"page": page, "page_size": page_size, "order_by": order_by, "order_direction": order_direction}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_proposition(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        article_no: str,
        price: typing.Optional[str] = OMIT,
        proposition_type: PostIncomePropositionsRequestPropositionType,
        time_unit: PostIncomePropositionsRequestTimeUnit,
        vat_rate: str,
    ) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - name: str.

            - description: typing.Optional[str].

            - article_no: str.

            - price: typing.Optional[str].

            - proposition_type: PostIncomePropositionsRequestPropositionType.

            - time_unit: PostIncomePropositionsRequestTimeUnit.

            - vat_rate: str.
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "article_no": article_no,
            "proposition_type": proposition_type,
            "time_unit": time_unit,
            "vat_rate": vat_rate,
        }
        if description is not OMIT:
            _request["description"] = description
        if price is not OMIT:
            _request["price"] = price
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "income/propositions"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieves_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.retrieves_a_proposition(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_a_proposition(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        article_no: typing.Optional[str] = OMIT,
        price: typing.Optional[str] = OMIT,
        proposition_type: typing.Optional[PutIncomePropositionsIdRequestPropositionType] = OMIT,
        time_unit: typing.Optional[PutIncomePropositionsIdRequestTimeUnit] = OMIT,
        vat_rate: typing.Optional[str] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition

            - name: typing.Optional[str].

            - description: typing.Optional[str].

            - article_no: typing.Optional[str].

            - price: typing.Optional[str].

            - proposition_type: typing.Optional[PutIncomePropositionsIdRequestPropositionType].

            - time_unit: typing.Optional[PutIncomePropositionsIdRequestTimeUnit].

            - vat_rate: typing.Optional[str].
        ---
        from feliche-93 import (PutIncomePropositionsIdRequestPropositionType,
                                PutIncomePropositionsIdRequestTimeUnit)
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.update_a_proposition(id="id", proposition_type=PutIncomePropositionsIdRequestPropositionType.SERVICE, time_unit=PutIncomePropositionsIdRequestTimeUnit.HOUR, )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if article_no is not OMIT:
            _request["article_no"] = article_no
        if price is not OMIT:
            _request["price"] = price
        if proposition_type is not OMIT:
            _request["proposition_type"] = proposition_type
        if time_unit is not OMIT:
            _request["time_unit"] = time_unit
        if vat_rate is not OMIT:
            _request["vat_rate"] = vat_rate
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.delete_a_proposition(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.archive_a_proposition(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unarchive_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.income_proposition_ware_oder_dienstleistung.unarchive_a_proposition(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIncomePropositionWareOderDienstleistungClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_all_propositions(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[
                GetIncomePropositionsRequestOrderDirectionItem,
                typing.List[GetIncomePropositionsRequestOrderDirectionItem],
            ]
        ] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetIncomePropositionsRequestOrderDirectionItem, typing.List[GetIncomePropositionsRequestOrderDirectionItem]]]. Order direction (must be used with order_by)
        ---
        from feliche-93 import GetIncomePropositionsRequestOrderDirectionItem
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.list_all_propositions(order_direction=GetIncomePropositionsRequestOrderDirectionItem.ASC, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "income/propositions"),
            params=remove_none_from_dict(
                {"page": page, "page_size": page_size, "order_by": order_by, "order_direction": order_direction}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_proposition(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        article_no: str,
        price: typing.Optional[str] = OMIT,
        proposition_type: PostIncomePropositionsRequestPropositionType,
        time_unit: PostIncomePropositionsRequestTimeUnit,
        vat_rate: str,
    ) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - name: str.

            - description: typing.Optional[str].

            - article_no: str.

            - price: typing.Optional[str].

            - proposition_type: PostIncomePropositionsRequestPropositionType.

            - time_unit: PostIncomePropositionsRequestTimeUnit.

            - vat_rate: str.
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "article_no": article_no,
            "proposition_type": proposition_type,
            "time_unit": time_unit,
            "vat_rate": vat_rate,
        }
        if description is not OMIT:
            _request["description"] = description
        if price is not OMIT:
            _request["price"] = price
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "income/propositions"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieves_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.retrieves_a_proposition(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_a_proposition(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        article_no: typing.Optional[str] = OMIT,
        price: typing.Optional[str] = OMIT,
        proposition_type: typing.Optional[PutIncomePropositionsIdRequestPropositionType] = OMIT,
        time_unit: typing.Optional[PutIncomePropositionsIdRequestTimeUnit] = OMIT,
        vat_rate: typing.Optional[str] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition

            - name: typing.Optional[str].

            - description: typing.Optional[str].

            - article_no: typing.Optional[str].

            - price: typing.Optional[str].

            - proposition_type: typing.Optional[PutIncomePropositionsIdRequestPropositionType].

            - time_unit: typing.Optional[PutIncomePropositionsIdRequestTimeUnit].

            - vat_rate: typing.Optional[str].
        ---
        from feliche-93 import (PutIncomePropositionsIdRequestPropositionType,
                                PutIncomePropositionsIdRequestTimeUnit)
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.update_a_proposition(id="id", proposition_type=PutIncomePropositionsIdRequestPropositionType.SERVICE, time_unit=PutIncomePropositionsIdRequestTimeUnit.HOUR, )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if article_no is not OMIT:
            _request["article_no"] = article_no
        if price is not OMIT:
            _request["price"] = price
        if proposition_type is not OMIT:
            _request["proposition_type"] = proposition_type
        if time_unit is not OMIT:
            _request["time_unit"] = time_unit
        if vat_rate is not OMIT:
            _request["vat_rate"] = vat_rate
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.delete_a_proposition(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.archive_a_proposition(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unarchive_a_proposition(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the proposition
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.income_proposition_ware_oder_dienstleistung.unarchive_a_proposition(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"income/propositions/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
