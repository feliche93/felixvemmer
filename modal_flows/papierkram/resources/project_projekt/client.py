# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from .types.get_projects_request_order_direction_item import GetProjectsRequestOrderDirectionItem
from .types.post_projects_request_customer import PostProjectsRequestCustomer
from .types.post_projects_request_default_proposition import PostProjectsRequestDefaultProposition
from .types.post_projects_request_team_members_item import PostProjectsRequestTeamMembersItem
from .types.put_projects_id_request_customer import PutProjectsIdRequestCustomer
from .types.put_projects_id_request_default_proposition import PutProjectsIdRequestDefaultProposition
from .types.put_projects_id_request_team_members_item import PutProjectsIdRequestTeamMembersItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectProjektClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_all_projects(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[GetProjectsRequestOrderDirectionItem, typing.List[GetProjectsRequestOrderDirectionItem]]
        ] = None,
        company_id: typing.Optional[int] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetProjectsRequestOrderDirectionItem, typing.List[GetProjectsRequestOrderDirectionItem]]]. Order direction (must be used with order_by)

            - company_id: typing.Optional[int]. Filter by company id
        ---
        from feliche-93 import GetProjectsRequestOrderDirectionItem
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.list_all_projects(order_direction=GetProjectsRequestOrderDirectionItem.ASC, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "projects"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "order_by": order_by,
                    "order_direction": order_direction,
                    "company_id": company_id,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_project(
        self,
        *,
        name: str,
        customer: PostProjectsRequestCustomer,
        description: typing.Optional[str] = OMIT,
        start_date: typing.Optional[str] = OMIT,
        end_date: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        budget_type: typing.Optional[str] = OMIT,
        budget_money: typing.Optional[str] = OMIT,
        budget_time: typing.Optional[str] = OMIT,
        budget_time_unit: typing.Optional[str] = OMIT,
        color: typing.Optional[str] = OMIT,
        default_proposition: typing.Optional[PostProjectsRequestDefaultProposition] = OMIT,
        team_members: typing.Optional[typing.List[PostProjectsRequestTeamMembersItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - name: str.

            - customer: PostProjectsRequestCustomer.

            - description: typing.Optional[str].

            - start_date: typing.Optional[str].

            - end_date: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - budget_type: typing.Optional[str].

            - budget_money: typing.Optional[str].

            - budget_time: typing.Optional[str].

            - budget_time_unit: typing.Optional[str].

            - color: typing.Optional[str].

            - default_proposition: typing.Optional[PostProjectsRequestDefaultProposition].

            - team_members: typing.Optional[typing.List[PostProjectsRequestTeamMembersItem]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "customer": customer}
        if description is not OMIT:
            _request["description"] = description
        if start_date is not OMIT:
            _request["start_date"] = start_date
        if end_date is not OMIT:
            _request["end_date"] = end_date
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if budget_type is not OMIT:
            _request["budget_type"] = budget_type
        if budget_money is not OMIT:
            _request["budget_money"] = budget_money
        if budget_time is not OMIT:
            _request["budget_time"] = budget_time
        if budget_time_unit is not OMIT:
            _request["budget_time_unit"] = budget_time_unit
        if color is not OMIT:
            _request["color"] = color
        if default_proposition is not OMIT:
            _request["default_proposition"] = default_proposition
        if team_members is not OMIT:
            _request["team_members"] = team_members
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "projects"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieves_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.retrieves_a_project(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_a_project(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        customer: typing.Optional[PutProjectsIdRequestCustomer] = OMIT,
        description: typing.Optional[str] = OMIT,
        start_date: typing.Optional[str] = OMIT,
        end_date: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        budget_type: typing.Optional[str] = OMIT,
        budget_money: typing.Optional[str] = OMIT,
        budget_time: typing.Optional[str] = OMIT,
        budget_time_unit: typing.Optional[str] = OMIT,
        color: typing.Optional[str] = OMIT,
        default_proposition: typing.Optional[PutProjectsIdRequestDefaultProposition] = OMIT,
        team_members: typing.Optional[typing.List[PutProjectsIdRequestTeamMembersItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project

            - name: typing.Optional[str].

            - customer: typing.Optional[PutProjectsIdRequestCustomer].

            - description: typing.Optional[str].

            - start_date: typing.Optional[str].

            - end_date: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - budget_type: typing.Optional[str].

            - budget_money: typing.Optional[str].

            - budget_time: typing.Optional[str].

            - budget_time_unit: typing.Optional[str].

            - color: typing.Optional[str].

            - default_proposition: typing.Optional[PutProjectsIdRequestDefaultProposition].

            - team_members: typing.Optional[typing.List[PutProjectsIdRequestTeamMembersItem]].
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.update_a_project(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if customer is not OMIT:
            _request["customer"] = customer
        if description is not OMIT:
            _request["description"] = description
        if start_date is not OMIT:
            _request["start_date"] = start_date
        if end_date is not OMIT:
            _request["end_date"] = end_date
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if budget_type is not OMIT:
            _request["budget_type"] = budget_type
        if budget_money is not OMIT:
            _request["budget_money"] = budget_money
        if budget_time is not OMIT:
            _request["budget_time"] = budget_time
        if budget_time_unit is not OMIT:
            _request["budget_time_unit"] = budget_time_unit
        if color is not OMIT:
            _request["color"] = color
        if default_proposition is not OMIT:
            _request["default_proposition"] = default_proposition
        if team_members is not OMIT:
            _request["team_members"] = team_members
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.delete_a_project(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.archive_a_project(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unarchive_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.project_projekt.unarchive_a_project(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProjectProjektClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_all_projects(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[GetProjectsRequestOrderDirectionItem, typing.List[GetProjectsRequestOrderDirectionItem]]
        ] = None,
        company_id: typing.Optional[int] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetProjectsRequestOrderDirectionItem, typing.List[GetProjectsRequestOrderDirectionItem]]]. Order direction (must be used with order_by)

            - company_id: typing.Optional[int]. Filter by company id
        ---
        from feliche-93 import GetProjectsRequestOrderDirectionItem
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.list_all_projects(order_direction=GetProjectsRequestOrderDirectionItem.ASC, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "projects"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "order_by": order_by,
                    "order_direction": order_direction,
                    "company_id": company_id,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_project(
        self,
        *,
        name: str,
        customer: PostProjectsRequestCustomer,
        description: typing.Optional[str] = OMIT,
        start_date: typing.Optional[str] = OMIT,
        end_date: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        budget_type: typing.Optional[str] = OMIT,
        budget_money: typing.Optional[str] = OMIT,
        budget_time: typing.Optional[str] = OMIT,
        budget_time_unit: typing.Optional[str] = OMIT,
        color: typing.Optional[str] = OMIT,
        default_proposition: typing.Optional[PostProjectsRequestDefaultProposition] = OMIT,
        team_members: typing.Optional[typing.List[PostProjectsRequestTeamMembersItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - name: str.

            - customer: PostProjectsRequestCustomer.

            - description: typing.Optional[str].

            - start_date: typing.Optional[str].

            - end_date: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - budget_type: typing.Optional[str].

            - budget_money: typing.Optional[str].

            - budget_time: typing.Optional[str].

            - budget_time_unit: typing.Optional[str].

            - color: typing.Optional[str].

            - default_proposition: typing.Optional[PostProjectsRequestDefaultProposition].

            - team_members: typing.Optional[typing.List[PostProjectsRequestTeamMembersItem]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "customer": customer}
        if description is not OMIT:
            _request["description"] = description
        if start_date is not OMIT:
            _request["start_date"] = start_date
        if end_date is not OMIT:
            _request["end_date"] = end_date
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if budget_type is not OMIT:
            _request["budget_type"] = budget_type
        if budget_money is not OMIT:
            _request["budget_money"] = budget_money
        if budget_time is not OMIT:
            _request["budget_time"] = budget_time
        if budget_time_unit is not OMIT:
            _request["budget_time_unit"] = budget_time_unit
        if color is not OMIT:
            _request["color"] = color
        if default_proposition is not OMIT:
            _request["default_proposition"] = default_proposition
        if team_members is not OMIT:
            _request["team_members"] = team_members
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "projects"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieves_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.retrieves_a_project(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_a_project(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        customer: typing.Optional[PutProjectsIdRequestCustomer] = OMIT,
        description: typing.Optional[str] = OMIT,
        start_date: typing.Optional[str] = OMIT,
        end_date: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        budget_type: typing.Optional[str] = OMIT,
        budget_money: typing.Optional[str] = OMIT,
        budget_time: typing.Optional[str] = OMIT,
        budget_time_unit: typing.Optional[str] = OMIT,
        color: typing.Optional[str] = OMIT,
        default_proposition: typing.Optional[PutProjectsIdRequestDefaultProposition] = OMIT,
        team_members: typing.Optional[typing.List[PutProjectsIdRequestTeamMembersItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project

            - name: typing.Optional[str].

            - customer: typing.Optional[PutProjectsIdRequestCustomer].

            - description: typing.Optional[str].

            - start_date: typing.Optional[str].

            - end_date: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - budget_type: typing.Optional[str].

            - budget_money: typing.Optional[str].

            - budget_time: typing.Optional[str].

            - budget_time_unit: typing.Optional[str].

            - color: typing.Optional[str].

            - default_proposition: typing.Optional[PutProjectsIdRequestDefaultProposition].

            - team_members: typing.Optional[typing.List[PutProjectsIdRequestTeamMembersItem]].
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.update_a_project(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if customer is not OMIT:
            _request["customer"] = customer
        if description is not OMIT:
            _request["description"] = description
        if start_date is not OMIT:
            _request["start_date"] = start_date
        if end_date is not OMIT:
            _request["end_date"] = end_date
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if budget_type is not OMIT:
            _request["budget_type"] = budget_type
        if budget_money is not OMIT:
            _request["budget_money"] = budget_money
        if budget_time is not OMIT:
            _request["budget_time"] = budget_time
        if budget_time_unit is not OMIT:
            _request["budget_time_unit"] = budget_time_unit
        if color is not OMIT:
            _request["color"] = color
        if default_proposition is not OMIT:
            _request["default_proposition"] = default_proposition
        if team_members is not OMIT:
            _request["team_members"] = team_members
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.delete_a_project(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.archive_a_project(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unarchive_a_project(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the project
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.project_projekt.unarchive_a_project(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"projects/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
