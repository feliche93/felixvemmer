# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from .types.get_expense_vouchers_request_order_direction_item import GetExpenseVouchersRequestOrderDirectionItem
from .types.post_expense_vouchers_id_pay_request_banking_transaction import (
    PostExpenseVouchersIdPayRequestBankingTransaction,
)
from .types.post_expense_vouchers_request_creditor import PostExpenseVouchersRequestCreditor
from .types.post_expense_vouchers_request_line_items_item import PostExpenseVouchersRequestLineItemsItem
from .types.put_expense_vouchers_id_request_creditor import PutExpenseVouchersIdRequestCreditor
from .types.put_expense_vouchers_id_request_line_items_item import PutExpenseVouchersIdRequestLineItemsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ExpenseVoucherAusgabeBelegClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def upload_a_document_for_a_voucher(self, voucher_id: int, *, file: typing.IO) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - voucher_id: int.

            - file: typing.IO.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{voucher_id}/documents"),
            data=jsonable_encoder({}),
            files={"file": file},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_a_document(self, id: str, voucher_id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the document

            - voucher_id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.delete_a_document(id="id", voucher_id="voucher-id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{voucher_id}/documents/{id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_all_vouchers(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[
                GetExpenseVouchersRequestOrderDirectionItem, typing.List[GetExpenseVouchersRequestOrderDirectionItem]
            ]
        ] = None,
        creditor_id: typing.Optional[int] = None,
        project_id: typing.Optional[int] = None,
        document_date_range_start: typing.Optional[str] = None,
        document_date_range_end: typing.Optional[str] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetExpenseVouchersRequestOrderDirectionItem, typing.List[GetExpenseVouchersRequestOrderDirectionItem]]]. Order direction (must be used with order_by)

            - creditor_id: typing.Optional[int]. Filter by creditor (company) id

            - project_id: typing.Optional[int]. Filter by project id

            - document_date_range_start: typing.Optional[str]. Filter by document date. Beginning of date range.

            - document_date_range_end: typing.Optional[str]. Filter by document date. End of date range.
        ---
        from feliche-93 import GetExpenseVouchersRequestOrderDirectionItem
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.list_all_vouchers(order_direction=GetExpenseVouchersRequestOrderDirectionItem.ASC, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "expense/vouchers"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "order_by": order_by,
                    "order_direction": order_direction,
                    "creditor_id": creditor_id,
                    "project_id": project_id,
                    "document_date_range_start": document_date_range_start,
                    "document_date_range_end": document_date_range_end,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_voucher(
        self,
        *,
        name: str,
        due_date: typing.Optional[str] = OMIT,
        document_date: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        entertainment_reason: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        provenance: str,
        entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]] = OMIT,
        creditor: typing.Optional[PostExpenseVouchersRequestCreditor] = OMIT,
        line_items: typing.Optional[typing.List[PostExpenseVouchersRequestLineItemsItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 50

        Parameters:
            - name: str.

            - due_date: typing.Optional[str].

            - document_date: typing.Optional[str].

            - description: typing.Optional[str].

            - entertainment_reason: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - provenance: str.

            - entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]].

            - creditor: typing.Optional[PostExpenseVouchersRequestCreditor].

            - line_items: typing.Optional[typing.List[PostExpenseVouchersRequestLineItemsItem]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "provenance": provenance}
        if due_date is not OMIT:
            _request["due_date"] = due_date
        if document_date is not OMIT:
            _request["document_date"] = document_date
        if description is not OMIT:
            _request["description"] = description
        if entertainment_reason is not OMIT:
            _request["entertainment_reason"] = entertainment_reason
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if entertainment_persons is not OMIT:
            _request["entertainment_persons"] = entertainment_persons
        if creditor is not OMIT:
            _request["creditor"] = creditor
        if line_items is not OMIT:
            _request["line_items"] = line_items
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "expense/vouchers"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieves_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.retrieves_a_voucher(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_a_voucher(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        due_date: typing.Optional[str] = OMIT,
        document_date: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        entertainment_reason: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        provenance: typing.Optional[str] = OMIT,
        entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]] = OMIT,
        creditor: typing.Optional[PutExpenseVouchersIdRequestCreditor] = OMIT,
        line_items: typing.Optional[typing.List[PutExpenseVouchersIdRequestLineItemsItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher

            - name: typing.Optional[str].

            - due_date: typing.Optional[str].

            - document_date: typing.Optional[str].

            - description: typing.Optional[str].

            - entertainment_reason: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - provenance: typing.Optional[str].

            - entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]].

            - creditor: typing.Optional[PutExpenseVouchersIdRequestCreditor].

            - line_items: typing.Optional[typing.List[PutExpenseVouchersIdRequestLineItemsItem]].
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.update_a_voucher(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if due_date is not OMIT:
            _request["due_date"] = due_date
        if document_date is not OMIT:
            _request["document_date"] = document_date
        if description is not OMIT:
            _request["description"] = description
        if entertainment_reason is not OMIT:
            _request["entertainment_reason"] = entertainment_reason
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if provenance is not OMIT:
            _request["provenance"] = provenance
        if entertainment_persons is not OMIT:
            _request["entertainment_persons"] = entertainment_persons
        if creditor is not OMIT:
            _request["creditor"] = creditor
        if line_items is not OMIT:
            _request["line_items"] = line_items
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.delete_a_voucher(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.archive_a_voucher(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unarchive_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.unarchive_a_voucher(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.cancel_a_voucher(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/cancel"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel_a_voucher_with_reverse_entry_generalumkehr(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.cancel_a_voucher_with_reverse_entry_generalumkehr(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/cancel_with_reverse_entry"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def mark_a_voucher_as_paid(
        self,
        id: str,
        *,
        payment_date: typing.Optional[str] = OMIT,
        value: typing.Optional[float] = OMIT,
        banking_transaction: typing.Optional[PostExpenseVouchersIdPayRequestBankingTransaction] = OMIT,
        difference_reason: typing.Optional[str] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher

            - payment_date: typing.Optional[str].

            - value: typing.Optional[float].

            - banking_transaction: typing.Optional[PostExpenseVouchersIdPayRequestBankingTransaction].

            - difference_reason: typing.Optional[str].
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.mark_a_voucher_as_paid(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if payment_date is not OMIT:
            _request["payment_date"] = payment_date
        if value is not OMIT:
            _request["value"] = value
        if banking_transaction is not OMIT:
            _request["banking_transaction"] = banking_transaction
        if difference_reason is not OMIT:
            _request["difference_reason"] = difference_reason
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/pay"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieves_an_expense_voucher_as_a_pdf(self, id: str) -> None:
        """
        Parameters:
            - id: str. The id of the expense voucher
        ---
        from feliche-93.client import PapierkramClient

        client = PapierkramClient(token="YOUR_TOKEN", )
        client.expense_voucher_ausgabe_beleg.retrieves_an_expense_voucher_as_a_pdf(id="id", )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncExpenseVoucherAusgabeBelegClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def upload_a_document_for_a_voucher(self, voucher_id: int, *, file: typing.IO) -> None:
        """
        Cost in API Credits: 10

        Parameters:
            - voucher_id: int.

            - file: typing.IO.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{voucher_id}/documents"),
            data=jsonable_encoder({}),
            files={"file": file},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_a_document(self, id: str, voucher_id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the document

            - voucher_id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.delete_a_document(id="id", voucher_id="voucher-id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{voucher_id}/documents/{id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_all_vouchers(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_direction: typing.Optional[
            typing.Union[
                GetExpenseVouchersRequestOrderDirectionItem, typing.List[GetExpenseVouchersRequestOrderDirectionItem]
            ]
        ] = None,
        creditor_id: typing.Optional[int] = None,
        project_id: typing.Optional[int] = None,
        document_date_range_start: typing.Optional[str] = None,
        document_date_range_end: typing.Optional[str] = None,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - page: typing.Optional[int]. Page number

            - page_size: typing.Optional[int]. Page size (1-100)

            - order_by: typing.Optional[str]. Order by field (must be used with order_direction)

            - order_direction: typing.Optional[typing.Union[GetExpenseVouchersRequestOrderDirectionItem, typing.List[GetExpenseVouchersRequestOrderDirectionItem]]]. Order direction (must be used with order_by)

            - creditor_id: typing.Optional[int]. Filter by creditor (company) id

            - project_id: typing.Optional[int]. Filter by project id

            - document_date_range_start: typing.Optional[str]. Filter by document date. Beginning of date range.

            - document_date_range_end: typing.Optional[str]. Filter by document date. End of date range.
        ---
        from feliche-93 import GetExpenseVouchersRequestOrderDirectionItem
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.list_all_vouchers(order_direction=GetExpenseVouchersRequestOrderDirectionItem.ASC, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "expense/vouchers"),
            params=remove_none_from_dict(
                {
                    "page": page,
                    "page_size": page_size,
                    "order_by": order_by,
                    "order_direction": order_direction,
                    "creditor_id": creditor_id,
                    "project_id": project_id,
                    "document_date_range_start": document_date_range_start,
                    "document_date_range_end": document_date_range_end,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_voucher(
        self,
        *,
        name: str,
        due_date: typing.Optional[str] = OMIT,
        document_date: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        entertainment_reason: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        provenance: str,
        entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]] = OMIT,
        creditor: typing.Optional[PostExpenseVouchersRequestCreditor] = OMIT,
        line_items: typing.Optional[typing.List[PostExpenseVouchersRequestLineItemsItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 50

        Parameters:
            - name: str.

            - due_date: typing.Optional[str].

            - document_date: typing.Optional[str].

            - description: typing.Optional[str].

            - entertainment_reason: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - provenance: str.

            - entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]].

            - creditor: typing.Optional[PostExpenseVouchersRequestCreditor].

            - line_items: typing.Optional[typing.List[PostExpenseVouchersRequestLineItemsItem]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "provenance": provenance}
        if due_date is not OMIT:
            _request["due_date"] = due_date
        if document_date is not OMIT:
            _request["document_date"] = document_date
        if description is not OMIT:
            _request["description"] = description
        if entertainment_reason is not OMIT:
            _request["entertainment_reason"] = entertainment_reason
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if entertainment_persons is not OMIT:
            _request["entertainment_persons"] = entertainment_persons
        if creditor is not OMIT:
            _request["creditor"] = creditor
        if line_items is not OMIT:
            _request["line_items"] = line_items
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "expense/vouchers"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieves_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.retrieves_a_voucher(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_a_voucher(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        due_date: typing.Optional[str] = OMIT,
        document_date: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        entertainment_reason: typing.Optional[str] = OMIT,
        flagged: typing.Optional[bool] = OMIT,
        provenance: typing.Optional[str] = OMIT,
        entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]] = OMIT,
        creditor: typing.Optional[PutExpenseVouchersIdRequestCreditor] = OMIT,
        line_items: typing.Optional[typing.List[PutExpenseVouchersIdRequestLineItemsItem]] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher

            - name: typing.Optional[str].

            - due_date: typing.Optional[str].

            - document_date: typing.Optional[str].

            - description: typing.Optional[str].

            - entertainment_reason: typing.Optional[str].

            - flagged: typing.Optional[bool].

            - provenance: typing.Optional[str].

            - entertainment_persons: typing.Optional[typing.List[typing.Optional[str]]].

            - creditor: typing.Optional[PutExpenseVouchersIdRequestCreditor].

            - line_items: typing.Optional[typing.List[PutExpenseVouchersIdRequestLineItemsItem]].
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.update_a_voucher(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if due_date is not OMIT:
            _request["due_date"] = due_date
        if document_date is not OMIT:
            _request["document_date"] = document_date
        if description is not OMIT:
            _request["description"] = description
        if entertainment_reason is not OMIT:
            _request["entertainment_reason"] = entertainment_reason
        if flagged is not OMIT:
            _request["flagged"] = flagged
        if provenance is not OMIT:
            _request["provenance"] = provenance
        if entertainment_persons is not OMIT:
            _request["entertainment_persons"] = entertainment_persons
        if creditor is not OMIT:
            _request["creditor"] = creditor
        if line_items is not OMIT:
            _request["line_items"] = line_items
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.delete_a_voucher(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.archive_a_voucher(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/archive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unarchive_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.unarchive_a_voucher(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/unarchive"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel_a_voucher(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.cancel_a_voucher(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/cancel"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel_a_voucher_with_reverse_entry_generalumkehr(self, id: str) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.cancel_a_voucher_with_reverse_entry_generalumkehr(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/cancel_with_reverse_entry"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def mark_a_voucher_as_paid(
        self,
        id: str,
        *,
        payment_date: typing.Optional[str] = OMIT,
        value: typing.Optional[float] = OMIT,
        banking_transaction: typing.Optional[PostExpenseVouchersIdPayRequestBankingTransaction] = OMIT,
        difference_reason: typing.Optional[str] = OMIT,
    ) -> None:
        """
        Cost in API Credits: 1

        Parameters:
            - id: str. The id of the voucher

            - payment_date: typing.Optional[str].

            - value: typing.Optional[float].

            - banking_transaction: typing.Optional[PostExpenseVouchersIdPayRequestBankingTransaction].

            - difference_reason: typing.Optional[str].
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.mark_a_voucher_as_paid(id="id", )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if payment_date is not OMIT:
            _request["payment_date"] = payment_date
        if value is not OMIT:
            _request["value"] = value
        if banking_transaction is not OMIT:
            _request["banking_transaction"] = banking_transaction
        if difference_reason is not OMIT:
            _request["difference_reason"] = difference_reason
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/pay"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieves_an_expense_voucher_as_a_pdf(self, id: str) -> None:
        """
        Parameters:
            - id: str. The id of the expense voucher
        ---
        from feliche-93.client import AsyncPapierkramClient

        client = AsyncPapierkramClient(token="YOUR_TOKEN", )
        await client.expense_voucher_ausgabe_beleg.retrieves_an_expense_voucher_as_a_pdf(id="id", )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"expense/vouchers/{id}/pdf"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
