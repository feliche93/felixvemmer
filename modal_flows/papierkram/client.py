# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import PapierkramClientEnvironment
from .resources.banking_bank_connection_bankverbindung.client import (
    AsyncBankingBankConnectionBankverbindungClient,
    BankingBankConnectionBankverbindungClient,
)
from .resources.banking_transaction_kontoumsatz.client import (
    AsyncBankingTransactionKontoumsatzClient,
    BankingTransactionKontoumsatzClient,
)
from .resources.contact_company_kontaktperson.client import (
    AsyncContactCompanyKontaktpersonClient,
    ContactCompanyKontaktpersonClient,
)
from .resources.contact_company_unternehmen.client import (
    AsyncContactCompanyUnternehmenClient,
    ContactCompanyUnternehmenClient,
)
from .resources.expense_voucher_ausgabe_beleg.client import (
    AsyncExpenseVoucherAusgabeBelegClient,
    ExpenseVoucherAusgabeBelegClient,
)
from .resources.income_estimate_angebot.client import AsyncIncomeEstimateAngebotClient, IncomeEstimateAngebotClient
from .resources.income_invoice_rechnung.client import AsyncIncomeInvoiceRechnungClient, IncomeInvoiceRechnungClient
from .resources.income_payment_term_zahlungsbedingungen.client import (
    AsyncIncomePaymentTermZahlungsbedingungenClient,
    IncomePaymentTermZahlungsbedingungenClient,
)
from .resources.income_proposition_ware_oder_dienstleistung.client import (
    AsyncIncomePropositionWareOderDienstleistungClient,
    IncomePropositionWareOderDienstleistungClient,
)
from .resources.info.client import AsyncInfoClient, InfoClient
from .resources.project_projekt.client import AsyncProjectProjektClient, ProjectProjektClient
from .resources.tracker_task_aufgabe.client import AsyncTrackerTaskAufgabeClient, TrackerTaskAufgabeClient
from .resources.tracker_time_entry_zeiteintrag.client import (
    AsyncTrackerTimeEntryZeiteintragClient,
    TrackerTimeEntryZeiteintragClient,
)
from .resources.user_benutzer.client import AsyncUserBenutzerClient, UserBenutzerClient


class PapierkramClient:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PapierkramClientEnvironment = PapierkramClientEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.banking_bank_connection_bankverbindung = BankingBankConnectionBankverbindungClient(
            client_wrapper=self._client_wrapper
        )
        self.banking_transaction_kontoumsatz = BankingTransactionKontoumsatzClient(client_wrapper=self._client_wrapper)
        self.contact_company_unternehmen = ContactCompanyUnternehmenClient(client_wrapper=self._client_wrapper)
        self.contact_company_kontaktperson = ContactCompanyKontaktpersonClient(client_wrapper=self._client_wrapper)
        self.expense_voucher_ausgabe_beleg = ExpenseVoucherAusgabeBelegClient(client_wrapper=self._client_wrapper)
        self.income_estimate_angebot = IncomeEstimateAngebotClient(client_wrapper=self._client_wrapper)
        self.income_invoice_rechnung = IncomeInvoiceRechnungClient(client_wrapper=self._client_wrapper)
        self.income_payment_term_zahlungsbedingungen = IncomePaymentTermZahlungsbedingungenClient(
            client_wrapper=self._client_wrapper
        )
        self.income_proposition_ware_oder_dienstleistung = IncomePropositionWareOderDienstleistungClient(
            client_wrapper=self._client_wrapper
        )
        self.info = InfoClient(client_wrapper=self._client_wrapper)
        self.project_projekt = ProjectProjektClient(client_wrapper=self._client_wrapper)
        self.tracker_task_aufgabe = TrackerTaskAufgabeClient(client_wrapper=self._client_wrapper)
        self.tracker_time_entry_zeiteintrag = TrackerTimeEntryZeiteintragClient(client_wrapper=self._client_wrapper)
        self.user_benutzer = UserBenutzerClient(client_wrapper=self._client_wrapper)


class AsyncPapierkramClient:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PapierkramClientEnvironment = PapierkramClientEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.banking_bank_connection_bankverbindung = AsyncBankingBankConnectionBankverbindungClient(
            client_wrapper=self._client_wrapper
        )
        self.banking_transaction_kontoumsatz = AsyncBankingTransactionKontoumsatzClient(
            client_wrapper=self._client_wrapper
        )
        self.contact_company_unternehmen = AsyncContactCompanyUnternehmenClient(client_wrapper=self._client_wrapper)
        self.contact_company_kontaktperson = AsyncContactCompanyKontaktpersonClient(client_wrapper=self._client_wrapper)
        self.expense_voucher_ausgabe_beleg = AsyncExpenseVoucherAusgabeBelegClient(client_wrapper=self._client_wrapper)
        self.income_estimate_angebot = AsyncIncomeEstimateAngebotClient(client_wrapper=self._client_wrapper)
        self.income_invoice_rechnung = AsyncIncomeInvoiceRechnungClient(client_wrapper=self._client_wrapper)
        self.income_payment_term_zahlungsbedingungen = AsyncIncomePaymentTermZahlungsbedingungenClient(
            client_wrapper=self._client_wrapper
        )
        self.income_proposition_ware_oder_dienstleistung = AsyncIncomePropositionWareOderDienstleistungClient(
            client_wrapper=self._client_wrapper
        )
        self.info = AsyncInfoClient(client_wrapper=self._client_wrapper)
        self.project_projekt = AsyncProjectProjektClient(client_wrapper=self._client_wrapper)
        self.tracker_task_aufgabe = AsyncTrackerTaskAufgabeClient(client_wrapper=self._client_wrapper)
        self.tracker_time_entry_zeiteintrag = AsyncTrackerTimeEntryZeiteintragClient(
            client_wrapper=self._client_wrapper
        )
        self.user_benutzer = AsyncUserBenutzerClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: PapierkramClientEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
